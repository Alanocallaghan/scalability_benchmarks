#!/usr/bin/env nextflow

def grid = []
new File('grid.tsv').eachLine { line ->
    grid << line.split("\t")
}
dc_channel = Channel.from(grid)

def datasets = []
new File('datasets.txt').eachLine { line ->
    datasets << line
}
advi_input = Channel.from(datasets)


N = 10
Thin = 2
Burn = 4
// OutputPath = "/exports/eddie/scratch/s1372510"
OutputPath = "/home/alan/tmp"

process runADVI {
  beforeScript "source ~/load_r.sh"

  memory '20 GB'
  cpus 1

  input:
  val dataset from advi_input

  output:
  set file ("chain.rds"), file("config.rds"), file("time.rds") into advi_output

  script:
  """
  #!/usr/bin/env Rscript
  library("devtools")
  library("here")

  suppressMessages({
    suppressPackageStartupMessages({
      load_all(here("../BASiCS"))
      load_all(here())
    })
  })
  data($dataset)
  with_spikes <- as.logical(length(altExpNames($dataset)))
  time <- system.time(
    chain <- BASiCS_stan(
      $dataset,
      WithSpikes = with_spikes,
      Regression = TRUE,
      iter = 10,
      tol_rel_obj = 1,
      eta = 0.1,
      eval_elbo = 2,
      adapt_engaged = FALSE
    )
  )
  chain <- stan2basics(
    chain, 
    gene_names = rownames(counts($dataset)),
    cell_names = colnames($dataset)
  )
  config <- list(
    chains = NA,
    by = "advi",
    data = "${dataset}",
    seed = NA
  )
  saveRDS(time, "time.rds")
  saveRDS(config, "config.rds")
  saveRDS(chain, "chain.rds")
  """
}

process runBenchmark {
  // clusterOptions

  beforeScript "source ~/load_r.sh"

  cpus { input[1] }
  memory '20 GB'

  input:
  val input from dc_channel

  output:
  set file("chains.rds"), file("config.rds"), file("time.rds") into benchmark_output

  script:
  dataset = input[0]
  chains = input[1]
  seed = input[2]
  split = input[3]

  """
  #!/usr/bin/env r

  options(stringsAsFactors = FALSE)
  library("devtools")
  library("here")

  suppressMessages({
    suppressPackageStartupMessages({
      load_all(here("../BASiCS"))
      load_all(here())
    })
  })
  source(here("data-raw/benchmark_scripts/benchmark_code.R"))
  data($dataset)
  data <- divide_and_conquer_benchmark(
    Data = ${dataset},
    DataName = "${dataset}",
    SubsetBy = "${split}",
    NSubsets = ${chains},
    Seed = ${seed},
    Regression = TRUE,
    Verbose = FALSE,
    N = ${N},
    Thin = ${Thin},
    Burn = ${Burn}
  )
  chains <- data[["chain"]]
  config <- data[["config"]]
  if (length(chains) == 1) {
    saveRDS(chains, file = "collapsed.rds")
  } else {
    collapsed <- combine_subposteriors(chains,
      subset_by = config[["by"]],
      method = "pie",
      weight_method = "n_weight",
      mc.cores = 1
    )
    saveRDS(pie_n, file = "collapsed.rds")
  }

  saveRDS(data[["chain"]], file = "chains.rds")
  saveRDS(data[["time"]], file = "time.rds")
  saveRDS(data[["config"]], file = "config.rds")
  """
}


process collect {
  cache false
  echo true

  beforeScript "source ~/load_r.sh"

  input:
  file "advi_input*" from advi_output.toList()
  file "dc_input.*" from benchmark_output.toList()
  file "time_plot.R" from file("benchmark_scripts/time_plot.R")
  file "utils.R" from file("benchmark_scripts/utils.R")
  file "de_on_table.R" from file("benchmark_scripts/de_on_table.R")

  """
  #!/usr/bin/env Rscript

  options(stringsAsFactors = FALSE)
  library("devtools")
  library("here")
  library("dplyr")


  suppressPackageStartupMessages({
    load_all(here("../BASiCS"))
    load_all(here())
  })

  source("utils.R")
  advi_files <- files <- list.files(pattern = "advi_input.")
  advi_df <- read_triplets(advi_files)

  dc_files <- list.files(pattern = "dc_input.")
  dc_df <- read_triplets(dc_files)

  df <- rbind(advi_df, dc_df)

  datasets <- unique(df[["data"]])
  data_dims <- vapply(
    datasets,
    function(x) {
      suppressMessages(
        dim(
          get(paste0(x))
        )
      )
    },
    FUN.VALUE = numeric(2)
  )
  data_dims <- as.data.frame(t(data_dims))
  colnames(data_dims) <- c("nGenes", "nCells")
  data_dims[["data"]] <- datasets
  df <- merge(df, data_dims)

  source("time_plot.R")
  references <- df[which(df[["chains"]] == 1), ]
  references[["chain"]] <- lapply(references[["file"]], readRDS)

  source("de_on_table.R")
  """
}
